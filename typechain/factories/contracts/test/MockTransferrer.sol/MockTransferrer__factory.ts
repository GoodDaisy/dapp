/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockTransferrer,
  MockTransferrerInterface,
} from "../../../../contracts/test/MockTransferrer.sol/MockTransferrer";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "gat",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "useGovernableApprovalTarget",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5061025b8061001d5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c8063efb3c0bb1461002d575b5f80fd5b6100476004803603810190610042919061014d565b610049565b005b8473ffffffffffffffffffffffffffffffffffffffff166315dacbea858585856040518563ffffffff1660e01b815260040161008894939291906101e2565b5f604051808303815f87803b15801561009f575f80fd5b505af11580156100b1573d5f803e3d5ffd5b505050505050505050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f6100e9826100c0565b9050919050565b6100f9816100df565b8114610103575f80fd5b50565b5f81359050610114816100f0565b92915050565b5f819050919050565b61012c8161011a565b8114610136575f80fd5b50565b5f8135905061014781610123565b92915050565b5f805f805f60a08688031215610166576101656100bc565b5b5f61017388828901610106565b955050602061018488828901610106565b945050604061019588828901610106565b93505060606101a688828901610106565b92505060806101b788828901610139565b9150509295509295909350565b6101cd816100df565b82525050565b6101dc8161011a565b82525050565b5f6080820190506101f55f8301876101c4565b61020260208301866101c4565b61020f60408301856101c4565b61021c60608301846101d3565b9594505050505056fea2646970667358221220dbf403045d44fee07671c2227c6e953039e1d745152f215211afd3e053377c5a64736f6c63430008150033";

type MockTransferrerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTransferrerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTransferrer__factory extends ContractFactory {
  constructor(...args: MockTransferrerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockTransferrer> {
    return super.deploy(overrides || {}) as Promise<MockTransferrer>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockTransferrer {
    return super.attach(address) as MockTransferrer;
  }
  override connect(signer: Signer): MockTransferrer__factory {
    return super.connect(signer) as MockTransferrer__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTransferrerInterface {
    return new utils.Interface(_abi) as MockTransferrerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockTransferrer {
    return new Contract(address, _abi, signerOrProvider) as MockTransferrer;
  }
}
