/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockZrxExchangeProxy,
  MockZrxExchangeProxyInterface,
} from "../../../contracts/test/MockZrxExchangeProxy";

const _abi = [
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap1",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap2",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap3",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap4",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap5",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "_1",
        type: "address[]",
      },
      {
        internalType: "uint256",
        name: "_2",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_3",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "_4",
        type: "bool",
      },
    ],
    name: "sellToUniswap6",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b50610e498061001d5f395ff3fe608060405260043610610073575f3560e01c8063752fe3ee1161004d578063752fe3ee146100d05780639b1d1f41146100ec578063b88ce71e14610108578063d9627aa4146101245761007a565b806302af0bb51461007c5780631f9b99851461009857806322170963146100b45761007a565b3661007a57005b005b610096600480360381019061009191906109ff565b610140565b005b6100b260048036038101906100ad91906109ff565b610284565b005b6100ce60048036038101906100c991906109ff565b610432565b005b6100ea60048036038101906100e591906109ff565b6105aa565b005b610106600480360381019061010191906109ff565b61073a565b005b610122600480360381019061011d91906109ff565b610775565b005b61013e600480360381019061013991906109ff565b61077c565b005b670de0b6b3a7640000341461018a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161018190610add565b60405180910390fd5b600185859050116101d0576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101c790610b45565b60405180910390fd5b848460018181106101e4576101e3610b63565b5b90506020020160208101906101f99190610bea565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b815260040161023c929190610c66565b6020604051808303815f875af1158015610258573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061027c9190610ca1565b505050505050565b5f85859050111561042b575f85855f8181106102a3576102a2610b63565b5b90506020020160208101906102b89190610bea565b90505f8173ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b81526004016102f6929190610ccc565b602060405180830381865afa158015610311573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103359190610d07565b905086865f81811061034a57610349610b63565b5b905060200201602081019061035f9190610bea565b73ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b815260040161039b93929190610d41565b6020604051808303815f875af11580156103b7573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103db9190610ca1565b503373ffffffffffffffffffffffffffffffffffffffff166108fc67016345785d8a000090811502906040515f60405180830381858888f19350505050158015610427573d5f803e3d5ffd5b5050505b5050505050565b5f8585905011610477576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046e90610b45565b60405180910390fd5b5f85855f81811061048b5761048a610b63565b5b90506020020160208101906104a09190610bea565b90505f868660018181106104b7576104b6610b63565b5b90506020020160208101906104cc9190610bea565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330683635c9adc5dea000006040518463ffffffff1660e01b815260040161051493929190610d76565b6020604051808303815f875af1158015610530573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906105549190610ca1565b503373ffffffffffffffffffffffffffffffffffffffff166108fc670de0b6b3a764000090811502906040515f60405180830381858888f193505050501580156105a0573d5f803e3d5ffd5b5050505050505050565b670de0b6b3a764000034146105f4576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105eb90610add565b60405180910390fd5b6001858590501161063a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063190610b45565b60405180910390fd5b8484600181811061064e5761064d610b63565b5b90506020020160208101906106639190610bea565b73ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b81526004016106a6929190610c66565b6020604051808303815f875af11580156106c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106e69190610ca1565b503373ffffffffffffffffffffffffffffffffffffffff166108fc6706f05b59d3b2000090811502906040515f60405180830381858888f19350505050158015610732573d5f803e3d5ffd5b505050505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161076c90610df5565b60405180910390fd5b5050505050565b600185859050116107c2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107b990610b45565b60405180910390fd5b5f85855f8181106107d6576107d5610b63565b5b90506020020160208101906107eb9190610bea565b90505f8686600181811061080257610801610b63565b5b90506020020160208101906108179190610bea565b90508173ffffffffffffffffffffffffffffffffffffffff166323b872dd3330683635c9adc5dea000006040518463ffffffff1660e01b815260040161085f93929190610d76565b6020604051808303815f875af115801561087b573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061089f9190610ca1565b508073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb33683635c9adc5dea000006040518363ffffffff1660e01b81526004016108e4929190610c66565b6020604051808303815f875af1158015610900573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109249190610ca1565b5050505050505050565b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261095757610956610936565b5b8235905067ffffffffffffffff8111156109745761097361093a565b5b6020830191508360208202830111156109905761098f61093e565b5b9250929050565b5f819050919050565b6109a981610997565b81146109b3575f80fd5b50565b5f813590506109c4816109a0565b92915050565b5f8115159050919050565b6109de816109ca565b81146109e8575f80fd5b50565b5f813590506109f9816109d5565b92915050565b5f805f805f60808688031215610a1857610a1761092e565b5b5f86013567ffffffffffffffff811115610a3557610a34610932565b5b610a4188828901610942565b95509550506020610a54888289016109b6565b9350506040610a65888289016109b6565b9250506060610a76888289016109eb565b9150509295509295909350565b5f82825260208201905092915050565b7f6d697370616964000000000000000000000000000000000000000000000000005f82015250565b5f610ac7600783610a83565b9150610ad282610a93565b602082019050919050565b5f6020820190508181035f830152610af481610abb565b9050919050565b7f746f6b656e7300000000000000000000000000000000000000000000000000005f82015250565b5f610b2f600683610a83565b9150610b3a82610afb565b602082019050919050565b5f6020820190508181035f830152610b5c81610b23565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610bb982610b90565b9050919050565b610bc981610baf565b8114610bd3575f80fd5b50565b5f81359050610be481610bc0565b92915050565b5f60208284031215610bff57610bfe61092e565b5b5f610c0c84828501610bd6565b91505092915050565b610c1e81610baf565b82525050565b5f819050919050565b5f819050919050565b5f610c50610c4b610c4684610c24565b610c2d565b610997565b9050919050565b610c6081610c36565b82525050565b5f604082019050610c795f830185610c15565b610c866020830184610c57565b9392505050565b5f81519050610c9b816109d5565b92915050565b5f60208284031215610cb657610cb561092e565b5b5f610cc384828501610c8d565b91505092915050565b5f604082019050610cdf5f830185610c15565b610cec6020830184610c15565b9392505050565b5f81519050610d01816109a0565b92915050565b5f60208284031215610d1c57610d1b61092e565b5b5f610d2984828501610cf3565b91505092915050565b610d3b81610997565b82525050565b5f606082019050610d545f830186610c15565b610d616020830185610c15565b610d6e6040830184610d32565b949350505050565b5f606082019050610d895f830186610c15565b610d966020830185610c15565b610da36040830184610c57565b949350505050565b7f536f727279206672656e000000000000000000000000000000000000000000005f82015250565b5f610ddf600a83610a83565b9150610dea82610dab565b602082019050919050565b5f6020820190508181035f830152610e0c81610dd3565b905091905056fea2646970667358221220f2fd89d0417ce70f36a872f26db21bdb37d90ded922970245f9d182a6292109664736f6c63430008150033";

type MockZrxExchangeProxyConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockZrxExchangeProxyConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockZrxExchangeProxy__factory extends ContractFactory {
  constructor(...args: MockZrxExchangeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: string }
  ): Promise<MockZrxExchangeProxy> {
    return super.deploy(overrides || {}) as Promise<MockZrxExchangeProxy>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): MockZrxExchangeProxy {
    return super.attach(address) as MockZrxExchangeProxy;
  }
  override connect(signer: Signer): MockZrxExchangeProxy__factory {
    return super.connect(signer) as MockZrxExchangeProxy__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockZrxExchangeProxyInterface {
    return new utils.Interface(_abi) as MockZrxExchangeProxyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockZrxExchangeProxy {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as MockZrxExchangeProxy;
  }
}
