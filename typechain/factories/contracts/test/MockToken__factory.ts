/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BigNumberish,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockToken,
  MockTokenInterface,
} from "../../../contracts/test/MockToken";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "supply",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "deadline",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    name: "permit",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801562000010575f80fd5b5060405162001abd38038062001abd83398181016040528101906200003691906200028c565b6040518060400160405280600981526020017f4d6f636b546f6b656e00000000000000000000000000000000000000000000008152506040518060400160405280600381526020017f4d544f00000000000000000000000000000000000000000000000000000000008152508160039081620000b3919062000517565b508060049081620000c5919062000517565b505050620000da3382620000e160201b60201c565b506200070c565b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160362000152576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401620001499062000659565b60405180910390fd5b620001655f83836200024660201b60201c565b8060025f828254620001789190620006a6565b92505081905550805f808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508173ffffffffffffffffffffffffffffffffffffffff165f73ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef83604051620002279190620006f1565b60405180910390a3620002425f83836200024b60201b60201c565b5050565b505050565b505050565b5f80fd5b5f819050919050565b620002688162000254565b811462000273575f80fd5b50565b5f8151905062000286816200025d565b92915050565b5f60208284031215620002a457620002a362000250565b5b5f620002b38482850162000276565b91505092915050565b5f81519050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f60028204905060018216806200033857607f821691505b6020821081036200034e576200034d620002f3565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f60088302620003b27fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000375565b620003be868362000375565b95508019841693508086168417925050509392505050565b5f819050919050565b5f620003ff620003f9620003f38462000254565b620003d6565b62000254565b9050919050565b5f819050919050565b6200041a83620003df565b62000432620004298262000406565b84845462000381565b825550505050565b5f90565b620004486200043a565b620004558184846200040f565b505050565b5b818110156200047c57620004705f826200043e565b6001810190506200045b565b5050565b601f821115620004cb57620004958162000354565b620004a08462000366565b81016020851015620004b0578190505b620004c8620004bf8562000366565b8301826200045a565b50505b505050565b5f82821c905092915050565b5f620004ed5f1984600802620004d0565b1980831691505092915050565b5f620005078383620004dc565b9150826002028217905092915050565b6200052282620002bc565b67ffffffffffffffff8111156200053e576200053d620002c6565b5b6200054a825462000320565b6200055782828562000480565b5f60209050601f8311600181146200058d575f841562000578578287015190505b620005848582620004fa565b865550620005f3565b601f1984166200059d8662000354565b5f5b82811015620005c6578489015182556001820191506020850194506020810190506200059f565b86831015620005e65784890151620005e2601f891682620004dc565b8355505b6001600288020188555050505b505050505050565b5f82825260208201905092915050565b7f45524332303a206d696e7420746f20746865207a65726f2061646472657373005f82015250565b5f62000641601f83620005fb565b91506200064e826200060b565b602082019050919050565b5f6020820190508181035f830152620006728162000633565b9050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f620006b28262000254565b9150620006bf8362000254565b9250828201905080821115620006da57620006d962000679565b5b92915050565b620006eb8162000254565b82525050565b5f602082019050620007065f830184620006e0565b92915050565b6113a3806200071a5f395ff3fe608060405234801561000f575f80fd5b50600436106100b2575f3560e01c806370a082311161006f57806370a08231146101a057806395d89b41146101d0578063a457c2d7146101ee578063a9059cbb1461021e578063d505accf1461024e578063dd62ed3e1461026a576100b2565b806306fdde03146100b6578063095ea7b3146100d457806318160ddd1461010457806323b872dd14610122578063313ce567146101525780633950935114610170575b5f80fd5b6100be61029a565b6040516100cb9190610b5b565b60405180910390f35b6100ee60048036038101906100e99190610c0c565b61032a565b6040516100fb9190610c64565b60405180910390f35b61010c61034c565b6040516101199190610c8c565b60405180910390f35b61013c60048036038101906101379190610ca5565b610355565b6040516101499190610c64565b60405180910390f35b61015a610383565b6040516101679190610d10565b60405180910390f35b61018a60048036038101906101859190610c0c565b61038b565b6040516101979190610c64565b60405180910390f35b6101ba60048036038101906101b59190610d29565b6103c1565b6040516101c79190610c8c565b60405180910390f35b6101d8610406565b6040516101e59190610b5b565b60405180910390f35b61020860048036038101906102039190610c0c565b610496565b6040516102159190610c64565b60405180910390f35b61023860048036038101906102339190610c0c565b61050b565b6040516102459190610c64565b60405180910390f35b61026860048036038101906102639190610db1565b61052d565b005b610284600480360381019061027f9190610e4e565b610584565b6040516102919190610c8c565b60405180910390f35b6060600380546102a990610eb9565b80601f01602080910402602001604051908101604052809291908181526020018280546102d590610eb9565b80156103205780601f106102f757610100808354040283529160200191610320565b820191905f5260205f20905b81548152906001019060200180831161030357829003601f168201915b5050505050905090565b5f80610334610606565b905061034181858561060d565b600191505092915050565b5f600254905090565b5f8061035f610606565b905061036c8582856107d0565b61037785858561085b565b60019150509392505050565b5f6012905090565b5f80610395610606565b90506103b68185856103a78589610584565b6103b19190610f16565b61060d565b600191505092915050565b5f805f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050919050565b60606004805461041590610eb9565b80601f016020809104026020016040519081016040528092919081815260200182805461044190610eb9565b801561048c5780601f106104635761010080835404028352916020019161048c565b820191905f5260205f20905b81548152906001019060200180831161046f57829003601f168201915b5050505050905090565b5f806104a0610606565b90505f6104ad8286610584565b9050838110156104f2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104e990610fb9565b60405180910390fd5b6104ff828686840361060d565b60019250505092915050565b5f80610515610606565b905061052281858561085b565b600191505092915050565b42841015610570576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056790611021565b60405180910390fd5b61057b87878761060d565b50505050505050565b5f60015f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2054905092915050565b5f33905090565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361067b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610672906110af565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106e9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106e09061113d565b60405180910390fd5b8060015f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516107c39190610c8c565b60405180910390a3505050565b5f6107db8484610584565b90507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81146108555781811015610847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083e906111a5565b60405180910390fd5b610854848484840361060d565b5b50505050565b5f73ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16036108c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108c090611233565b60405180910390fd5b5f73ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610937576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161092e906112c1565b60405180910390fd5b610942838383610ac7565b5f805f8573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f20549050818110156109c5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109bc9061134f565b60405180910390fd5b8181035f808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f2081905550815f808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f82825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610aae9190610c8c565b60405180910390a3610ac1848484610acc565b50505050565b505050565b505050565b5f81519050919050565b5f82825260208201905092915050565b5f5b83811015610b08578082015181840152602081019050610aed565b5f8484015250505050565b5f601f19601f8301169050919050565b5f610b2d82610ad1565b610b378185610adb565b9350610b47818560208601610aeb565b610b5081610b13565b840191505092915050565b5f6020820190508181035f830152610b738184610b23565b905092915050565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610ba882610b7f565b9050919050565b610bb881610b9e565b8114610bc2575f80fd5b50565b5f81359050610bd381610baf565b92915050565b5f819050919050565b610beb81610bd9565b8114610bf5575f80fd5b50565b5f81359050610c0681610be2565b92915050565b5f8060408385031215610c2257610c21610b7b565b5b5f610c2f85828601610bc5565b9250506020610c4085828601610bf8565b9150509250929050565b5f8115159050919050565b610c5e81610c4a565b82525050565b5f602082019050610c775f830184610c55565b92915050565b610c8681610bd9565b82525050565b5f602082019050610c9f5f830184610c7d565b92915050565b5f805f60608486031215610cbc57610cbb610b7b565b5b5f610cc986828701610bc5565b9350506020610cda86828701610bc5565b9250506040610ceb86828701610bf8565b9150509250925092565b5f60ff82169050919050565b610d0a81610cf5565b82525050565b5f602082019050610d235f830184610d01565b92915050565b5f60208284031215610d3e57610d3d610b7b565b5b5f610d4b84828501610bc5565b91505092915050565b610d5d81610cf5565b8114610d67575f80fd5b50565b5f81359050610d7881610d54565b92915050565b5f819050919050565b610d9081610d7e565b8114610d9a575f80fd5b50565b5f81359050610dab81610d87565b92915050565b5f805f805f805f60e0888a031215610dcc57610dcb610b7b565b5b5f610dd98a828b01610bc5565b9750506020610dea8a828b01610bc5565b9650506040610dfb8a828b01610bf8565b9550506060610e0c8a828b01610bf8565b9450506080610e1d8a828b01610d6a565b93505060a0610e2e8a828b01610d9d565b92505060c0610e3f8a828b01610d9d565b91505092959891949750929550565b5f8060408385031215610e6457610e63610b7b565b5b5f610e7185828601610bc5565b9250506020610e8285828601610bc5565b9150509250929050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f6002820490506001821680610ed057607f821691505b602082108103610ee357610ee2610e8c565b5b50919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610f2082610bd9565b9150610f2b83610bd9565b9250828201905080821115610f4357610f42610ee9565b5b92915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f775f8201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b5f610fa3602583610adb565b9150610fae82610f49565b604082019050919050565b5f6020820190508181035f830152610fd081610f97565b9050919050565b7f546f6f206f6c64210000000000000000000000000000000000000000000000005f82015250565b5f61100b600883610adb565b915061101682610fd7565b602082019050919050565b5f6020820190508181035f83015261103881610fff565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f206164645f8201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b5f611099602483610adb565b91506110a48261103f565b604082019050919050565b5f6020820190508181035f8301526110c68161108d565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f2061646472655f8201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b5f611127602283610adb565b9150611132826110cd565b604082019050919050565b5f6020820190508181035f8301526111548161111b565b9050919050565b7f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000005f82015250565b5f61118f601d83610adb565b915061119a8261115b565b602082019050919050565b5f6020820190508181035f8301526111bc81611183565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f2061645f8201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b5f61121d602583610adb565b9150611228826111c3565b604082019050919050565b5f6020820190508181035f83015261124a81611211565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f20616464725f8201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b5f6112ab602383610adb565b91506112b682611251565b604082019050919050565b5f6020820190508181035f8301526112d88161129f565b9050919050565b7f45524332303a207472616e7366657220616d6f756e74206578636565647320625f8201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b5f611339602683610adb565b9150611344826112df565b604082019050919050565b5f6020820190508181035f8301526113668161132d565b905091905056fea26469706673582212208a0af3eb159fd92b66ab5b662714d7605b50996d793c8260dcf0238b225d839564736f6c63430008150033";

type MockTokenConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTokenConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    supply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<MockToken> {
    return super.deploy(supply, overrides || {}) as Promise<MockToken>;
  }
  override getDeployTransaction(
    supply: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(supply, overrides || {});
  }
  override attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  override connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
