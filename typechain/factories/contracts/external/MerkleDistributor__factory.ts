/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  BytesLike,
  Overrides,
} from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleDistributor,
  MerkleDistributorInterface,
} from "../../../contracts/external/MerkleDistributor";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "token_",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "merkleRoot_",
        type: "bytes32",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "Claimed",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes32[]",
        name: "merkleProof",
        type: "bytes32[]",
      },
    ],
    name: "claim",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "isClaimed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "merkleRoot",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x60c060405234801562000010575f80fd5b5060405162000cea38038062000cea833981810160405281019062000036919062000117565b8173ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff16815250508060a0818152505050506200015c565b5f80fd5b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f620000a9826200007e565b9050919050565b620000bb816200009d565b8114620000c6575f80fd5b50565b5f81519050620000d981620000b0565b92915050565b5f819050919050565b620000f381620000df565b8114620000fe575f80fd5b50565b5f815190506200011181620000e8565b92915050565b5f806040838503121562000130576200012f6200007a565b5b5f6200013f85828601620000c9565b9250506020620001528582860162000101565b9150509250929050565b60805160a051610b5e6200018c5f395f8181610193015261031f01525f818161020201526103920152610b5e5ff3fe608060405234801561000f575f80fd5b506004361061004a575f3560e01c80632e7ba6ef1461004e5780632eb4a7ab1461006a5780639e34070f14610088578063fc0c546a146100b8575b5f80fd5b610068600480360381019061006391906105a4565b6100d6565b005b61007261031d565b60405161007f9190610640565b60405180910390f35b6100a2600480360381019061009d9190610659565b610341565b6040516100af919061069e565b60405180910390f35b6100c0610390565b6040516100cd91906106c6565b60405180910390f35b6100df85610341565b1561011f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101169061075f565b60405180910390fd5b5f858585604051602001610135939291906107e2565b6040516020818303038152906040528051906020012090506101b88383808060200260200160405190810160405280939291908181526020018383602002808284375f81840152601f19601f820116905080830192505050505050507f0000000000000000000000000000000000000000000000000000000000000000836103b4565b6101f7576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ee9061088e565b60405180910390fd5b610200866103ca565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663a9059cbb86866040518363ffffffff1660e01b815260040161025b9291906108bb565b6020604051808303815f875af1158015610277573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061029b919061090c565b6102da576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016102d1906109a7565b60405180910390fd5b7f4ec90e965519d92681267467f775ada5bd214aa92c0dc93d90a5e880ce9ed02686868660405161030d939291906109c5565b60405180910390a1505050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f80610100836103519190610a54565b90505f610100846103629190610a84565b90505f805f8481526020019081526020015f205490505f826001901b90508081831614945050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b5f826103c0858461041c565b1490509392505050565b5f610100826103d99190610a54565b90505f610100836103ea9190610a84565b9050806001901b5f808481526020019081526020015f2054175f808481526020019081526020015f2081905550505050565b5f808290505f5b8451811015610465576104508286838151811061044357610442610ab4565b5b6020026020010151610470565b9150808061045d90610ae1565b915050610423565b508091505092915050565b5f81831061048757610482828461049a565b610492565b610491838361049a565b5b905092915050565b5f825f528160205260405f20905092915050565b5f80fd5b5f80fd5b5f819050919050565b6104c8816104b6565b81146104d2575f80fd5b50565b5f813590506104e3816104bf565b92915050565b5f73ffffffffffffffffffffffffffffffffffffffff82169050919050565b5f610512826104e9565b9050919050565b61052281610508565b811461052c575f80fd5b50565b5f8135905061053d81610519565b92915050565b5f80fd5b5f80fd5b5f80fd5b5f8083601f84011261056457610563610543565b5b8235905067ffffffffffffffff81111561058157610580610547565b5b60208301915083602082028301111561059d5761059c61054b565b5b9250929050565b5f805f805f608086880312156105bd576105bc6104ae565b5b5f6105ca888289016104d5565b95505060206105db8882890161052f565b94505060406105ec888289016104d5565b935050606086013567ffffffffffffffff81111561060d5761060c6104b2565b5b6106198882890161054f565b92509250509295509295909350565b5f819050919050565b61063a81610628565b82525050565b5f6020820190506106535f830184610631565b92915050565b5f6020828403121561066e5761066d6104ae565b5b5f61067b848285016104d5565b91505092915050565b5f8115159050919050565b61069881610684565b82525050565b5f6020820190506106b15f83018461068f565b92915050565b6106c081610508565b82525050565b5f6020820190506106d95f8301846106b7565b92915050565b5f82825260208201905092915050565b7f4d65726b6c654469737472696275746f723a2044726f7020616c7265616479205f8201527f636c61696d65642e000000000000000000000000000000000000000000000000602082015250565b5f6107496028836106df565b9150610754826106ef565b604082019050919050565b5f6020820190508181035f8301526107768161073d565b9050919050565b5f819050919050565b610797610792826104b6565b61077d565b82525050565b5f8160601b9050919050565b5f6107b38261079d565b9050919050565b5f6107c4826107a9565b9050919050565b6107dc6107d782610508565b6107ba565b82525050565b5f6107ed8286610786565b6020820191506107fd82856107cb565b60148201915061080d8284610786565b602082019150819050949350505050565b7f4d65726b6c654469737472696275746f723a20496e76616c69642070726f6f665f8201527f2e00000000000000000000000000000000000000000000000000000000000000602082015250565b5f6108786021836106df565b91506108838261081e565b604082019050919050565b5f6020820190508181035f8301526108a58161086c565b9050919050565b6108b5816104b6565b82525050565b5f6040820190506108ce5f8301856106b7565b6108db60208301846108ac565b9392505050565b6108eb81610684565b81146108f5575f80fd5b50565b5f81519050610906816108e2565b92915050565b5f60208284031215610921576109206104ae565b5b5f61092e848285016108f8565b91505092915050565b7f4d65726b6c654469737472696275746f723a205472616e73666572206661696c5f8201527f65642e0000000000000000000000000000000000000000000000000000000000602082015250565b5f6109916023836106df565b915061099c82610937565b604082019050919050565b5f6020820190508181035f8301526109be81610985565b9050919050565b5f6060820190506109d85f8301866108ac565b6109e560208301856106b7565b6109f260408301846108ac565b949350505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b5f610a5e826104b6565b9150610a69836104b6565b925082610a7957610a786109fa565b5b828204905092915050565b5f610a8e826104b6565b9150610a99836104b6565b925082610aa957610aa86109fa565b5b828206905092915050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b5f610aeb826104b6565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610b1d57610b1c610a27565b5b60018201905091905056fea26469706673582212207ba2d9b3545ab52fbe18c301161737a39e3760295c204fb24bbbedc894810aa464736f6c63430008150033";

type MerkleDistributorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleDistributorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleDistributor__factory extends ContractFactory {
  constructor(...args: MerkleDistributorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    token_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<MerkleDistributor> {
    return super.deploy(
      token_,
      merkleRoot_,
      overrides || {}
    ) as Promise<MerkleDistributor>;
  }
  override getDeployTransaction(
    token_: string,
    merkleRoot_: BytesLike,
    overrides?: Overrides & { from?: string }
  ): TransactionRequest {
    return super.getDeployTransaction(token_, merkleRoot_, overrides || {});
  }
  override attach(address: string): MerkleDistributor {
    return super.attach(address) as MerkleDistributor;
  }
  override connect(signer: Signer): MerkleDistributor__factory {
    return super.connect(signer) as MerkleDistributor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleDistributorInterface {
    return new utils.Interface(_abi) as MerkleDistributorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleDistributor {
    return new Contract(address, _abi, signerOrProvider) as MerkleDistributor;
  }
}
