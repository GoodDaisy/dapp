/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export declare namespace ExpiringMerkleDistributorFactory {
  export type MerkleProposalStruct = {
    merkleRoot: BytesLike;
    amount: BigNumberish;
    startTime: BigNumberish;
    endTime: BigNumberish;
    createdAt: BigNumberish;
  };

  export type MerkleProposalStructOutput = [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    merkleRoot: string;
    amount: BigNumber;
    startTime: BigNumber;
    endTime: BigNumber;
    createdAt: BigNumber;
  };
}

export interface ExpiringMerkleDistributorFactoryInterface
  extends utils.Interface {
  functions: {
    "activeProposals(uint256)": FunctionFragment;
    "clawBackExpiredDistributor(address)": FunctionFragment;
    "deployProposedMerkle(uint256)": FunctionFragment;
    "getActiveProposals()": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "proposeMerkle((bytes32,uint256,uint256,uint256,uint256))": FunctionFragment;
    "proposedMerkleDelay()": FunctionFragment;
    "proposer()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setProposalDelay(uint256)": FunctionFragment;
    "setProposer(address)": FunctionFragment;
    "token()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "vetoProposedMerkle(uint256)": FunctionFragment;
    "withdrawProposedMerkle(uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "activeProposals"
      | "clawBackExpiredDistributor"
      | "deployProposedMerkle"
      | "getActiveProposals"
      | "owner"
      | "pause"
      | "paused"
      | "proposeMerkle"
      | "proposedMerkleDelay"
      | "proposer"
      | "renounceOwnership"
      | "setProposalDelay"
      | "setProposer"
      | "token"
      | "transferOwnership"
      | "unpause"
      | "vetoProposedMerkle"
      | "withdrawProposedMerkle"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "activeProposals",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "clawBackExpiredDistributor",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "deployProposedMerkle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getActiveProposals",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proposeMerkle",
    values: [ExpiringMerkleDistributorFactory.MerkleProposalStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "proposedMerkleDelay",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "proposer", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setProposalDelay",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setProposer", values: [string]): string;
  encodeFunctionData(functionFragment: "token", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "vetoProposedMerkle",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawProposedMerkle",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "activeProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "clawBackExpiredDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployProposedMerkle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getActiveProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proposeMerkle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposedMerkleDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "proposer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposalDelay",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setProposer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "token", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "vetoProposedMerkle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawProposedMerkle",
    data: BytesLike
  ): Result;

  events: {
    "DeployMerkleDistributor(address,uint256,uint256)": EventFragment;
    "NewProposalDelay(uint256)": EventFragment;
    "NewProposer(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "ProposeMerkleDistributor(bytes32,uint256,uint256,uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "VetoMerkleDistributor(address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "DeployMerkleDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposalDelay"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewProposer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposeMerkleDistributor"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "VetoMerkleDistributor"): EventFragment;
}

export interface DeployMerkleDistributorEventObject {
  distributor: string;
  amount: BigNumber;
  proposalIndex: BigNumber;
}
export type DeployMerkleDistributorEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  DeployMerkleDistributorEventObject
>;

export type DeployMerkleDistributorEventFilter =
  TypedEventFilter<DeployMerkleDistributorEvent>;

export interface NewProposalDelayEventObject {
  proposedMerkleDelay: BigNumber;
}
export type NewProposalDelayEvent = TypedEvent<
  [BigNumber],
  NewProposalDelayEventObject
>;

export type NewProposalDelayEventFilter =
  TypedEventFilter<NewProposalDelayEvent>;

export interface NewProposerEventObject {
  proposer: string;
}
export type NewProposerEvent = TypedEvent<[string], NewProposerEventObject>;

export type NewProposerEventFilter = TypedEventFilter<NewProposerEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface ProposeMerkleDistributorEventObject {
  merkleRoot: string;
  amount: BigNumber;
  startTime: BigNumber;
  endTime: BigNumber;
}
export type ProposeMerkleDistributorEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  ProposeMerkleDistributorEventObject
>;

export type ProposeMerkleDistributorEventFilter =
  TypedEventFilter<ProposeMerkleDistributorEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface VetoMerkleDistributorEventObject {
  vetoer: string;
  index: BigNumber;
}
export type VetoMerkleDistributorEvent = TypedEvent<
  [string, BigNumber],
  VetoMerkleDistributorEventObject
>;

export type VetoMerkleDistributorEventFilter =
  TypedEventFilter<VetoMerkleDistributorEvent>;

export interface ExpiringMerkleDistributorFactory extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ExpiringMerkleDistributorFactoryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    activeProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        merkleRoot: string;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        createdAt: BigNumber;
      }
    >;

    clawBackExpiredDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    deployProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getActiveProposals(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    proposeMerkle(
      proposal: ExpiringMerkleDistributorFactory.MerkleProposalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    proposedMerkleDelay(overrides?: CallOverrides): Promise<[BigNumber]>;

    proposer(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposalDelay(
      proposedMerkleDelay_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setProposer(
      proposer_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    token(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    vetoProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    withdrawProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  activeProposals(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
      merkleRoot: string;
      amount: BigNumber;
      startTime: BigNumber;
      endTime: BigNumber;
      createdAt: BigNumber;
    }
  >;

  clawBackExpiredDistributor(
    distributor: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  deployProposedMerkle(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getActiveProposals(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  proposeMerkle(
    proposal: ExpiringMerkleDistributorFactory.MerkleProposalStruct,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  proposedMerkleDelay(overrides?: CallOverrides): Promise<BigNumber>;

  proposer(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposalDelay(
    proposedMerkleDelay_: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setProposer(
    proposer_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  token(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  vetoProposedMerkle(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  withdrawProposedMerkle(
    index: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    activeProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [string, BigNumber, BigNumber, BigNumber, BigNumber] & {
        merkleRoot: string;
        amount: BigNumber;
        startTime: BigNumber;
        endTime: BigNumber;
        createdAt: BigNumber;
      }
    >;

    clawBackExpiredDistributor(
      distributor: string,
      overrides?: CallOverrides
    ): Promise<void>;

    deployProposedMerkle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getActiveProposals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    proposeMerkle(
      proposal: ExpiringMerkleDistributorFactory.MerkleProposalStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    proposedMerkleDelay(overrides?: CallOverrides): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setProposalDelay(
      proposedMerkleDelay_: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setProposer(proposer_: string, overrides?: CallOverrides): Promise<void>;

    token(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    vetoProposedMerkle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawProposedMerkle(
      index: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "DeployMerkleDistributor(address,uint256,uint256)"(
      distributor?: string | null,
      amount?: null,
      proposalIndex?: null
    ): DeployMerkleDistributorEventFilter;
    DeployMerkleDistributor(
      distributor?: string | null,
      amount?: null,
      proposalIndex?: null
    ): DeployMerkleDistributorEventFilter;

    "NewProposalDelay(uint256)"(
      proposedMerkleDelay?: null
    ): NewProposalDelayEventFilter;
    NewProposalDelay(proposedMerkleDelay?: null): NewProposalDelayEventFilter;

    "NewProposer(address)"(proposer?: string | null): NewProposerEventFilter;
    NewProposer(proposer?: string | null): NewProposerEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "ProposeMerkleDistributor(bytes32,uint256,uint256,uint256)"(
      merkleRoot?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): ProposeMerkleDistributorEventFilter;
    ProposeMerkleDistributor(
      merkleRoot?: null,
      amount?: null,
      startTime?: null,
      endTime?: null
    ): ProposeMerkleDistributorEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "VetoMerkleDistributor(address,uint256)"(
      vetoer?: string | null,
      index?: null
    ): VetoMerkleDistributorEventFilter;
    VetoMerkleDistributor(
      vetoer?: string | null,
      index?: null
    ): VetoMerkleDistributorEventFilter;
  };

  estimateGas: {
    activeProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    clawBackExpiredDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    deployProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getActiveProposals(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    proposeMerkle(
      proposal: ExpiringMerkleDistributorFactory.MerkleProposalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    proposedMerkleDelay(overrides?: CallOverrides): Promise<BigNumber>;

    proposer(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposalDelay(
      proposedMerkleDelay_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setProposer(
      proposer_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    token(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    vetoProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    withdrawProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    activeProposals(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    clawBackExpiredDistributor(
      distributor: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    deployProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getActiveProposals(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proposeMerkle(
      proposal: ExpiringMerkleDistributorFactory.MerkleProposalStruct,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    proposedMerkleDelay(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposalDelay(
      proposedMerkleDelay_: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setProposer(
      proposer_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    token(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    vetoProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    withdrawProposedMerkle(
      index: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
