/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface NodeInterface extends utils.Interface {
  functions: {
    "commitXpFunction(bytes32)": FunctionFragment;
    "gameParameters()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "stake(uint256)": FunctionFragment;
    "stakeUnlockTime(address)": FunctionFragment;
    "taho()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unstake(uint256)": FunctionFragment;
    "updateName(string)": FunctionFragment;
    "veTaho()": FunctionFragment;
    "xpFunctionHash()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "commitXpFunction"
      | "gameParameters"
      | "name"
      | "owner"
      | "renounceOwnership"
      | "stake"
      | "stakeUnlockTime"
      | "taho"
      | "transferOwnership"
      | "unstake"
      | "updateName"
      | "veTaho"
      | "xpFunctionHash"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "commitXpFunction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "gameParameters",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "stake", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "stakeUnlockTime",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "taho", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "unstake",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "updateName", values: [string]): string;
  encodeFunctionData(functionFragment: "veTaho", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "xpFunctionHash",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "commitXpFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "gameParameters",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stake", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "stakeUnlockTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "taho", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unstake", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateName", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "veTaho", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "xpFunctionHash",
    data: BytesLike
  ): Result;

  events: {
    "NameUpdated(string)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Staked(address,uint256,uint256)": EventFragment;
    "Unstaked(address,uint256)": EventFragment;
    "XpFunctionUpdated(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "NameUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Staked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unstaked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "XpFunctionUpdated"): EventFragment;
}

export interface NameUpdatedEventObject {
  newName: string;
}
export type NameUpdatedEvent = TypedEvent<[string], NameUpdatedEventObject>;

export type NameUpdatedEventFilter = TypedEventFilter<NameUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface StakedEventObject {
  staker: string;
  amount: BigNumber;
  unlockAt: BigNumber;
}
export type StakedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  StakedEventObject
>;

export type StakedEventFilter = TypedEventFilter<StakedEvent>;

export interface UnstakedEventObject {
  staker: string;
  amount: BigNumber;
}
export type UnstakedEvent = TypedEvent<
  [string, BigNumber],
  UnstakedEventObject
>;

export type UnstakedEventFilter = TypedEventFilter<UnstakedEvent>;

export interface XpFunctionUpdatedEventObject {
  newXpFunctionHash: string;
}
export type XpFunctionUpdatedEvent = TypedEvent<
  [string],
  XpFunctionUpdatedEventObject
>;

export type XpFunctionUpdatedEventFilter =
  TypedEventFilter<XpFunctionUpdatedEvent>;

export interface Node extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: NodeInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    commitXpFunction(
      newXpFunctionHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    gameParameters(overrides?: CallOverrides): Promise<[string]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    stakeUnlockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    taho(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    updateName(
      newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    veTaho(overrides?: CallOverrides): Promise<[string]>;

    xpFunctionHash(overrides?: CallOverrides): Promise<[string]>;
  };

  commitXpFunction(
    newXpFunctionHash: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  gameParameters(overrides?: CallOverrides): Promise<string>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  stakeUnlockTime(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  taho(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unstake(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  updateName(
    newName: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  veTaho(overrides?: CallOverrides): Promise<string>;

  xpFunctionHash(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    commitXpFunction(
      newXpFunctionHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    gameParameters(overrides?: CallOverrides): Promise<string>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    stake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    stakeUnlockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taho(overrides?: CallOverrides): Promise<string>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unstake(amount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateName(newName: string, overrides?: CallOverrides): Promise<void>;

    veTaho(overrides?: CallOverrides): Promise<string>;

    xpFunctionHash(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "NameUpdated(string)"(newName?: null): NameUpdatedEventFilter;
    NameUpdated(newName?: null): NameUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Staked(address,uint256,uint256)"(
      staker?: string | null,
      amount?: null,
      unlockAt?: null
    ): StakedEventFilter;
    Staked(
      staker?: string | null,
      amount?: null,
      unlockAt?: null
    ): StakedEventFilter;

    "Unstaked(address,uint256)"(
      staker?: string | null,
      amount?: null
    ): UnstakedEventFilter;
    Unstaked(staker?: string | null, amount?: null): UnstakedEventFilter;

    "XpFunctionUpdated(bytes32)"(
      newXpFunctionHash?: null
    ): XpFunctionUpdatedEventFilter;
    XpFunctionUpdated(newXpFunctionHash?: null): XpFunctionUpdatedEventFilter;
  };

  estimateGas: {
    commitXpFunction(
      newXpFunctionHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    gameParameters(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    stakeUnlockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    taho(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    updateName(
      newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    veTaho(overrides?: CallOverrides): Promise<BigNumber>;

    xpFunctionHash(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    commitXpFunction(
      newXpFunctionHash: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    gameParameters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    stakeUnlockTime(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    taho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unstake(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    updateName(
      newName: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    veTaho(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    xpFunctionHash(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
