/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface HuntingGroundInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "WITHDRAW_TYPEHASH()": FunctionFragment;
    "accruedFees()": FunctionFragment;
    "approvalTarget()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "cachedChainId()": FunctionFragment;
    "cachedDomainSeparator()": FunctionFragment;
    "deposit(uint256,address)": FunctionFragment;
    "deposit(uint256)": FunctionFragment;
    "deposit()": FunctionFragment;
    "depositWithApprovalTarget(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "depositsAllowedAfter()": FunctionFragment;
    "duration()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "feeRate()": FunctionFragment;
    "feeRateLastUpdated()": FunctionFragment;
    "feeRecipient()": FunctionFragment;
    "getReward()": FunctionFragment;
    "getReward(address)": FunctionFragment;
    "getTVL()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "permitAndDeposit(uint256,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "recoverFromTypeHashSignature(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "rewardPerShare()": FunctionFragment;
    "rewardPerShareStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewardToken()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "setFeeRecipient(address)": FunctionFragment;
    "setManagementFee(uint256)": FunctionFragment;
    "sharesPerDepositedUnderlying()": FunctionFragment;
    "sweepFees()": FunctionFragment;
    "targetManagementFee()": FunctionFragment;
    "timelockRewardsWithdrawalAllowedAfter()": FunctionFragment;
    "timelockedRewardsWithdrawal()": FunctionFragment;
    "topUpRewards(uint256)": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "userRewardPerSharePaid(address)": FunctionFragment;
    "vault()": FunctionFragment;
    "want()": FunctionFragment;
    "withdraw(uint256,address)": FunctionFragment;
    "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "withdraw(uint256)": FunctionFragment;
    "withdraw()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "WITHDRAW_TYPEHASH"
      | "accruedFees"
      | "approvalTarget"
      | "balanceOf"
      | "cachedChainId"
      | "cachedDomainSeparator"
      | "deposit(uint256,address)"
      | "deposit(uint256)"
      | "deposit()"
      | "depositWithApprovalTarget"
      | "depositsAllowedAfter"
      | "duration"
      | "earned"
      | "feeRate"
      | "feeRateLastUpdated"
      | "feeRecipient"
      | "getReward()"
      | "getReward(address)"
      | "getTVL"
      | "lastUpdateTime"
      | "nonces"
      | "owner"
      | "pause"
      | "paused"
      | "periodFinish"
      | "permitAndDeposit"
      | "recoverFromTypeHashSignature"
      | "renounceOwnership"
      | "rewardPerShare"
      | "rewardPerShareStored"
      | "rewardRate"
      | "rewardToken"
      | "rewards"
      | "setFeeRecipient"
      | "setManagementFee"
      | "sharesPerDepositedUnderlying"
      | "sweepFees"
      | "targetManagementFee"
      | "timelockRewardsWithdrawalAllowedAfter"
      | "timelockedRewardsWithdrawal"
      | "topUpRewards"
      | "totalSupply"
      | "transferOwnership"
      | "unpause"
      | "userRewardPerSharePaid"
      | "vault"
      | "want"
      | "withdraw(uint256,address)"
      | "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"
      | "withdraw(uint256)"
      | "withdraw()"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "WITHDRAW_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "accruedFees",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "approvalTarget",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cachedChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cachedDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "deposit()", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "depositWithApprovalTarget",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "depositsAllowedAfter",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRateLastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "feeRecipient",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward()",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getReward(address)",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "getTVL", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "permitAndDeposit",
    values: [
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFromTypeHashSignature",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerShareStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardToken",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipient",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "setManagementFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sharesPerDepositedUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "sweepFees", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "targetManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockRewardsWithdrawalAllowedAfter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "timelockedRewardsWithdrawal",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "topUpRewards",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "userRewardPerSharePaid",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "vault", values?: undefined): string;
  encodeFunctionData(functionFragment: "want", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256,address)",
    values: [BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)",
    values: [
      string,
      BigNumberish,
      string,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw(uint256)",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw()",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "WITHDRAW_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "accruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "approvalTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cachedChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deposit(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit()", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "depositWithApprovalTarget",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositsAllowedAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRateLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward()",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReward(address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTVL", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "permitAndDeposit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFromTypeHashSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerShareStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rewardToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipient",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "sharesPerDepositedUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sweepFees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "targetManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockRewardsWithdrawalAllowedAfter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "timelockedRewardsWithdrawal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "topUpRewards",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerSharePaid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vault", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "want", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256,address)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdraw(uint256)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw()", data: BytesLike): Result;

  events: {
    "Deposit(address,uint256)": EventFragment;
    "FeesSwept(uint256,address)": EventFragment;
    "NewFeeRecipient(address)": EventFragment;
    "NewManagementFee(uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "RewardPaid(address,uint256)": EventFragment;
    "RewardsToppedUp(uint256)": EventFragment;
    "Unpaused(address)": EventFragment;
    "Withdrawal(address,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeesSwept"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewFeeRecipient"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NewManagementFee"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RewardsToppedUp"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdrawal"): EventFragment;
}

export interface DepositEventObject {
  recipient: string;
  amountWant: BigNumber;
}
export type DepositEvent = TypedEvent<[string, BigNumber], DepositEventObject>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FeesSweptEventObject {
  amount: BigNumber;
  recipient: string;
}
export type FeesSweptEvent = TypedEvent<
  [BigNumber, string],
  FeesSweptEventObject
>;

export type FeesSweptEventFilter = TypedEventFilter<FeesSweptEvent>;

export interface NewFeeRecipientEventObject {
  newFeeRecipient: string;
}
export type NewFeeRecipientEvent = TypedEvent<
  [string],
  NewFeeRecipientEventObject
>;

export type NewFeeRecipientEventFilter = TypedEventFilter<NewFeeRecipientEvent>;

export interface NewManagementFeeEventObject {
  newTargetManagementFee: BigNumber;
}
export type NewManagementFeeEvent = TypedEvent<
  [BigNumber],
  NewManagementFeeEventObject
>;

export type NewManagementFeeEventFilter =
  TypedEventFilter<NewManagementFeeEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface RewardPaidEventObject {
  recipient: string;
  amountReward: BigNumber;
}
export type RewardPaidEvent = TypedEvent<
  [string, BigNumber],
  RewardPaidEventObject
>;

export type RewardPaidEventFilter = TypedEventFilter<RewardPaidEvent>;

export interface RewardsToppedUpEventObject {
  amountReward: BigNumber;
}
export type RewardsToppedUpEvent = TypedEvent<
  [BigNumber],
  RewardsToppedUpEventObject
>;

export type RewardsToppedUpEventFilter = TypedEventFilter<RewardsToppedUpEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface WithdrawalEventObject {
  withdrawer: string;
  amountWant: BigNumber;
  recipient: string;
}
export type WithdrawalEvent = TypedEvent<
  [string, BigNumber, string],
  WithdrawalEventObject
>;

export type WithdrawalEventFilter = TypedEventFilter<WithdrawalEvent>;

export interface HuntingGround extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: HuntingGroundInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<[string]>;

    accruedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    approvalTarget(overrides?: CallOverrides): Promise<[string]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    cachedChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    "deposit(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositWithApprovalTarget(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    depositsAllowedAfter(overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRecipient(overrides?: CallOverrides): Promise<[string]>;

    "getReward()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "getReward(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    getTVL(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    permitAndDeposit(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    rewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardToken(overrides?: CallOverrides): Promise<[string]>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setManagementFee(
      newTargetManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    sharesPerDepositedUnderlying(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    sweepFees(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    targetManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    timelockRewardsWithdrawalAllowedAfter(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    timelockedRewardsWithdrawal(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    topUpRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    vault(overrides?: CallOverrides): Promise<[string]>;

    want(overrides?: CallOverrides): Promise<[string]>;

    "withdraw(uint256,address)"(
      amountShares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      amountShares: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw(uint256)"(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

  approvalTarget(overrides?: CallOverrides): Promise<string>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

  cachedDomainSeparator(overrides?: CallOverrides): Promise<string>;

  "deposit(uint256,address)"(
    amount: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit(uint256)"(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "deposit()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositWithApprovalTarget(
    amount: BigNumberish,
    recipient: string,
    owner: string,
    amountPermitted: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  depositsAllowedAfter(overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  feeRecipient(overrides?: CallOverrides): Promise<string>;

  "getReward()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "getReward(address)"(
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  getTVL(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  permitAndDeposit(
    amount: BigNumberish,
    recipient: string,
    owner: string,
    amountPermitted: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverFromTypeHashSignature(
    typeHashDigest: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewardToken(overrides?: CallOverrides): Promise<string>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  setFeeRecipient(
    newFeeRecipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setManagementFee(
    newTargetManagementFee: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  sweepFees(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  timelockRewardsWithdrawalAllowedAfter(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  timelockedRewardsWithdrawal(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  topUpRewards(
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  userRewardPerSharePaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  vault(overrides?: CallOverrides): Promise<string>;

  want(overrides?: CallOverrides): Promise<string>;

  "withdraw(uint256,address)"(
    amountShares: BigNumberish,
    recipient: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"(
    owner: string,
    amountShares: BigNumberish,
    recipient: string,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw(uint256)"(
    amountShares: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "withdraw()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<string>;

    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    approvalTarget(overrides?: CallOverrides): Promise<string>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<string>;

    "deposit(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "deposit()"(overrides?: CallOverrides): Promise<BigNumber>;

    depositWithApprovalTarget(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositsAllowedAfter(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<string>;

    "getReward()"(overrides?: CallOverrides): Promise<void>;

    "getReward(address)"(
      recipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    getTVL(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    permitAndDeposit(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<string>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setManagementFee(
      newTargetManagementFee: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    sweepFees(overrides?: CallOverrides): Promise<void>;

    targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    timelockRewardsWithdrawalAllowedAfter(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockedRewardsWithdrawal(overrides?: CallOverrides): Promise<void>;

    topUpRewards(
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<string>;

    want(overrides?: CallOverrides): Promise<string>;

    "withdraw(uint256,address)"(
      amountShares: BigNumberish,
      recipient: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      amountShares: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amountShares: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "withdraw()"(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "Deposit(address,uint256)"(
      recipient?: string | null,
      amountWant?: null
    ): DepositEventFilter;
    Deposit(recipient?: string | null, amountWant?: null): DepositEventFilter;

    "FeesSwept(uint256,address)"(
      amount?: null,
      recipient?: null
    ): FeesSweptEventFilter;
    FeesSwept(amount?: null, recipient?: null): FeesSweptEventFilter;

    "NewFeeRecipient(address)"(
      newFeeRecipient?: null
    ): NewFeeRecipientEventFilter;
    NewFeeRecipient(newFeeRecipient?: null): NewFeeRecipientEventFilter;

    "NewManagementFee(uint256)"(
      newTargetManagementFee?: null
    ): NewManagementFeeEventFilter;
    NewManagementFee(
      newTargetManagementFee?: null
    ): NewManagementFeeEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "RewardPaid(address,uint256)"(
      recipient?: string | null,
      amountReward?: null
    ): RewardPaidEventFilter;
    RewardPaid(
      recipient?: string | null,
      amountReward?: null
    ): RewardPaidEventFilter;

    "RewardsToppedUp(uint256)"(amountReward?: null): RewardsToppedUpEventFilter;
    RewardsToppedUp(amountReward?: null): RewardsToppedUpEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;

    "Withdrawal(address,uint256,address)"(
      withdrawer?: string | null,
      amountWant?: null,
      recipient?: null
    ): WithdrawalEventFilter;
    Withdrawal(
      withdrawer?: string | null,
      amountWant?: null,
      recipient?: null
    ): WithdrawalEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<BigNumber>;

    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    approvalTarget(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    "deposit(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "deposit()"(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    depositWithApprovalTarget(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    depositsAllowedAfter(overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    feeRecipient(overrides?: CallOverrides): Promise<BigNumber>;

    "getReward()"(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "getReward(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    getTVL(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    permitAndDeposit(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewardToken(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setManagementFee(
      newTargetManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    sweepFees(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    timelockRewardsWithdrawalAllowedAfter(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    timelockedRewardsWithdrawal(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    topUpRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    vault(overrides?: CallOverrides): Promise<BigNumber>;

    want(overrides?: CallOverrides): Promise<BigNumber>;

    "withdraw(uint256,address)"(
      amountShares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      amountShares: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw(uint256)"(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    "withdraw()"(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    WITHDRAW_TYPEHASH(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    accruedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    approvalTarget(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cachedChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cachedDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "deposit(uint256,address)"(
      amount: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit(uint256)"(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "deposit()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositWithApprovalTarget(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    depositsAllowedAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRateLastUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRecipient(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getReward()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "getReward(address)"(
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    getTVL(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitAndDeposit(
      amount: BigNumberish,
      recipient: string,
      owner: string,
      amountPermitted: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    rewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerShareStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFeeRecipient(
      newFeeRecipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setManagementFee(
      newTargetManagementFee: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    sharesPerDepositedUnderlying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sweepFees(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    targetManagementFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockRewardsWithdrawalAllowedAfter(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    timelockedRewardsWithdrawal(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    topUpRewards(
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    vault(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    want(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "withdraw(uint256,address)"(
      amountShares: BigNumberish,
      recipient: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(address,uint256,address,uint256,uint8,bytes32,bytes32)"(
      owner: string,
      amountShares: BigNumberish,
      recipient: string,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw(uint256)"(
      amountShares: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "withdraw()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
