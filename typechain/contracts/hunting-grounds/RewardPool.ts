/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface RewardPoolInterface extends utils.Interface {
  functions: {
    "accruedFees()": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "duration()": FunctionFragment;
    "earned(address)": FunctionFragment;
    "feeRate()": FunctionFragment;
    "feeRateLastUpdated()": FunctionFragment;
    "lastUpdateTime()": FunctionFragment;
    "periodFinish()": FunctionFragment;
    "rewardPerShare()": FunctionFragment;
    "rewardPerShareStored()": FunctionFragment;
    "rewardRate()": FunctionFragment;
    "rewards(address)": FunctionFragment;
    "sharesPerDepositedUnderlying()": FunctionFragment;
    "targetManagementFee()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "userRewardPerSharePaid(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "accruedFees"
      | "balanceOf"
      | "duration"
      | "earned"
      | "feeRate"
      | "feeRateLastUpdated"
      | "lastUpdateTime"
      | "periodFinish"
      | "rewardPerShare"
      | "rewardPerShareStored"
      | "rewardRate"
      | "rewards"
      | "sharesPerDepositedUnderlying"
      | "targetManagementFee"
      | "totalSupply"
      | "userRewardPerSharePaid"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "accruedFees",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "duration", values?: undefined): string;
  encodeFunctionData(functionFragment: "earned", values: [string]): string;
  encodeFunctionData(functionFragment: "feeRate", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "feeRateLastUpdated",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "lastUpdateTime",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "periodFinish",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerShare",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardPerShareStored",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "rewardRate",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "rewards", values: [string]): string;
  encodeFunctionData(
    functionFragment: "sharesPerDepositedUnderlying",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "targetManagementFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "userRewardPerSharePaid",
    values: [string]
  ): string;

  decodeFunctionResult(
    functionFragment: "accruedFees",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "duration", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "earned", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "feeRate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "feeRateLastUpdated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lastUpdateTime",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "periodFinish",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerShare",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rewardPerShareStored",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "rewardRate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rewards", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "sharesPerDepositedUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "targetManagementFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userRewardPerSharePaid",
    data: BytesLike
  ): Result;

  events: {};
}

export interface RewardPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RewardPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    accruedFees(overrides?: CallOverrides): Promise<[BigNumber]>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    duration(overrides?: CallOverrides): Promise<[BigNumber]>;

    earned(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<[BigNumber]>;

    lastUpdateTime(overrides?: CallOverrides): Promise<[BigNumber]>;

    periodFinish(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerShare(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewardRate(overrides?: CallOverrides): Promise<[BigNumber]>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    sharesPerDepositedUnderlying(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    targetManagementFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

  balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  duration(overrides?: CallOverrides): Promise<BigNumber>;

  earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  feeRate(overrides?: CallOverrides): Promise<BigNumber>;

  feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

  lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

  periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

  rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

  rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

  rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

  targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  userRewardPerSharePaid(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    accruedFees(overrides?: CallOverrides): Promise<BigNumber>;

    balanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    duration(overrides?: CallOverrides): Promise<BigNumber>;

    earned(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    feeRate(overrides?: CallOverrides): Promise<BigNumber>;

    feeRateLastUpdated(overrides?: CallOverrides): Promise<BigNumber>;

    lastUpdateTime(overrides?: CallOverrides): Promise<BigNumber>;

    periodFinish(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShare(overrides?: CallOverrides): Promise<BigNumber>;

    rewardPerShareStored(overrides?: CallOverrides): Promise<BigNumber>;

    rewardRate(overrides?: CallOverrides): Promise<BigNumber>;

    rewards(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    sharesPerDepositedUnderlying(overrides?: CallOverrides): Promise<BigNumber>;

    targetManagementFee(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    accruedFees(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    balanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    duration(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    earned(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    feeRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeRateLastUpdated(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lastUpdateTime(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    periodFinish(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerShare(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewardPerShareStored(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rewardRate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    rewards(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    sharesPerDepositedUnderlying(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    targetManagementFee(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    userRewardPerSharePaid(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
