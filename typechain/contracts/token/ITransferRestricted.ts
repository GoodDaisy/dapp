/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface ITransferRestrictedInterface extends utils.Interface {
  functions: {
    "disableTransferRestriction()": FunctionFragment;
    "removeAccountRestriction(address)": FunctionFragment;
    "removeDestinationRestriction(address)": FunctionFragment;
    "setUnpauser(address)": FunctionFragment;
    "unpauser()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "disableTransferRestriction"
      | "removeAccountRestriction"
      | "removeDestinationRestriction"
      | "setUnpauser"
      | "unpauser"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "disableTransferRestriction",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "removeAccountRestriction",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "removeDestinationRestriction",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "setUnpauser", values: [string]): string;
  encodeFunctionData(functionFragment: "unpauser", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "disableTransferRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAccountRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeDestinationRestriction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUnpauser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpauser", data: BytesLike): Result;

  events: {};
}

export interface ITransferRestricted extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITransferRestrictedInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    disableTransferRestriction(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeAccountRestriction(
      unrestrictedAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    removeDestinationRestriction(
      dst: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    setUnpauser(
      unpauser_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpauser(overrides?: CallOverrides): Promise<[string]>;
  };

  disableTransferRestriction(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeAccountRestriction(
    unrestrictedAccount: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  removeDestinationRestriction(
    dst: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  setUnpauser(
    unpauser_: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpauser(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    disableTransferRestriction(overrides?: CallOverrides): Promise<void>;

    removeAccountRestriction(
      unrestrictedAccount: string,
      overrides?: CallOverrides
    ): Promise<void>;

    removeDestinationRestriction(
      dst: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setUnpauser(unpauser_: string, overrides?: CallOverrides): Promise<void>;

    unpauser(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    disableTransferRestriction(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeAccountRestriction(
      unrestrictedAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    removeDestinationRestriction(
      dst: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    setUnpauser(
      unpauser_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpauser(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    disableTransferRestriction(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeAccountRestriction(
      unrestrictedAccount: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    removeDestinationRestriction(
      dst: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    setUnpauser(
      unpauser_: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
