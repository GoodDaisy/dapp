/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface GovernableApprovalTargetInterface extends utils.Interface {
  functions: {
    "DOMAIN_SEPARATOR()": FunctionFragment;
    "PERMIT_AND_TRANSFER_FROM_TYPEHASH()": FunctionFragment;
    "addAddressToAllowList(address)": FunctionFragment;
    "allowList(address)": FunctionFragment;
    "cachedChainId()": FunctionFragment;
    "cachedDomainSeparator()": FunctionFragment;
    "nonces(address)": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "paused()": FunctionFragment;
    "permitAndTransferFrom(address,address,address,uint256,uint256,uint8,bytes32,bytes32)": FunctionFragment;
    "recoverFromTypeHashSignature(bytes32,uint8,bytes32,bytes32)": FunctionFragment;
    "removeAddressFromAllowList(address)": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "transferFrom(address,address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "DOMAIN_SEPARATOR"
      | "PERMIT_AND_TRANSFER_FROM_TYPEHASH"
      | "addAddressToAllowList"
      | "allowList"
      | "cachedChainId"
      | "cachedDomainSeparator"
      | "nonces"
      | "owner"
      | "pause"
      | "paused"
      | "permitAndTransferFrom"
      | "recoverFromTypeHashSignature"
      | "removeAddressFromAllowList"
      | "renounceOwnership"
      | "transferFrom"
      | "transferOwnership"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "DOMAIN_SEPARATOR",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "PERMIT_AND_TRANSFER_FROM_TYPEHASH",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addAddressToAllowList",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "allowList", values: [string]): string;
  encodeFunctionData(
    functionFragment: "cachedChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "cachedDomainSeparator",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "nonces", values: [string]): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "permitAndTransferFrom",
    values: [
      string,
      string,
      string,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "recoverFromTypeHashSignature",
    values: [BytesLike, BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeAddressFromAllowList",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "DOMAIN_SEPARATOR",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "PERMIT_AND_TRANSFER_FROM_TYPEHASH",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addAddressToAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowList", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "cachedChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cachedDomainSeparator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "nonces", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "permitAndTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recoverFromTypeHashSignature",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeAddressFromAllowList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "AddressAddedToAllowList(address)": EventFragment;
    "AddressRemovedFromAllowList(address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressAddedToAllowList"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "AddressRemovedFromAllowList"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export interface AddressAddedToAllowListEventObject {
  allowed: string;
}
export type AddressAddedToAllowListEvent = TypedEvent<
  [string],
  AddressAddedToAllowListEventObject
>;

export type AddressAddedToAllowListEventFilter =
  TypedEventFilter<AddressAddedToAllowListEvent>;

export interface AddressRemovedFromAllowListEventObject {
  disallowed: string;
}
export type AddressRemovedFromAllowListEvent = TypedEvent<
  [string],
  AddressRemovedFromAllowListEventObject
>;

export type AddressRemovedFromAllowListEventFilter =
  TypedEventFilter<AddressRemovedFromAllowListEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface PausedEventObject {
  account: string;
}
export type PausedEvent = TypedEvent<[string], PausedEventObject>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export interface UnpausedEventObject {
  account: string;
}
export type UnpausedEvent = TypedEvent<[string], UnpausedEventObject>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GovernableApprovalTarget extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GovernableApprovalTargetInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<[string]>;

    PERMIT_AND_TRANSFER_FROM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<[string]>;

    addAddressToAllowList(
      allowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    cachedChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<[string]>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    permitAndTransferFrom(
      erc20: string,
      owner: string,
      recipient: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    removeAddressFromAllowList(
      disallowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferFrom(
      token: string,
      tokenOwner: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;
  };

  DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

  PERMIT_AND_TRANSFER_FROM_TYPEHASH(overrides?: CallOverrides): Promise<string>;

  addAddressToAllowList(
    allowedAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  allowList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

  cachedDomainSeparator(overrides?: CallOverrides): Promise<string>;

  nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  permitAndTransferFrom(
    erc20: string,
    owner: string,
    recipient: string,
    amount: BigNumberish,
    deadline: BigNumberish,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  recoverFromTypeHashSignature(
    typeHashDigest: BytesLike,
    v: BigNumberish,
    r: BytesLike,
    s: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  removeAddressFromAllowList(
    disallowedAddress: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferFrom(
    token: string,
    tokenOwner: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  callStatic: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<string>;

    PERMIT_AND_TRANSFER_FROM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<string>;

    addAddressToAllowList(
      allowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<string>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    permitAndTransferFrom(
      erc20: string,
      owner: string,
      recipient: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    removeAddressFromAllowList(
      disallowedAddress: string,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    transferFrom(
      token: string,
      tokenOwner: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "AddressAddedToAllowList(address)"(
      allowed?: null
    ): AddressAddedToAllowListEventFilter;
    AddressAddedToAllowList(allowed?: null): AddressAddedToAllowListEventFilter;

    "AddressRemovedFromAllowList(address)"(
      disallowed?: null
    ): AddressRemovedFromAllowListEventFilter;
    AddressRemovedFromAllowList(
      disallowed?: null
    ): AddressRemovedFromAllowListEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<BigNumber>;

    PERMIT_AND_TRANSFER_FROM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    addAddressToAllowList(
      allowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    allowList(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    cachedChainId(overrides?: CallOverrides): Promise<BigNumber>;

    cachedDomainSeparator(overrides?: CallOverrides): Promise<BigNumber>;

    nonces(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    permitAndTransferFrom(
      erc20: string,
      owner: string,
      recipient: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    removeAddressFromAllowList(
      disallowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferFrom(
      token: string,
      tokenOwner: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    DOMAIN_SEPARATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    PERMIT_AND_TRANSFER_FROM_TYPEHASH(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addAddressToAllowList(
      allowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    allowList(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cachedChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    cachedDomainSeparator(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    nonces(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    permitAndTransferFrom(
      erc20: string,
      owner: string,
      recipient: string,
      amount: BigNumberish,
      deadline: BigNumberish,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    recoverFromTypeHashSignature(
      typeHashDigest: BytesLike,
      v: BigNumberish,
      r: BytesLike,
      s: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeAddressFromAllowList(
      disallowedAddress: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      token: string,
      tokenOwner: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;
  };
}
