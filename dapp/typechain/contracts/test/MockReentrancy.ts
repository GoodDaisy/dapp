/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
} from "../../common";

export interface MockReentrancyInterface extends utils.Interface {
  functions: {
    "a()": FunctionFragment;
    "a(bool)": FunctionFragment;
    "b()": FunctionFragment;
    "c()": FunctionFragment;
    "d()": FunctionFragment;
    "e()": FunctionFragment;
    "f()": FunctionFragment;
    "g()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "a()"
      | "a(bool)"
      | "b"
      | "c"
      | "d"
      | "e"
      | "f"
      | "g"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "a()", values?: undefined): string;
  encodeFunctionData(functionFragment: "a(bool)", values: [boolean]): string;
  encodeFunctionData(functionFragment: "b", values?: undefined): string;
  encodeFunctionData(functionFragment: "c", values?: undefined): string;
  encodeFunctionData(functionFragment: "d", values?: undefined): string;
  encodeFunctionData(functionFragment: "e", values?: undefined): string;
  encodeFunctionData(functionFragment: "f", values?: undefined): string;
  encodeFunctionData(functionFragment: "g", values?: undefined): string;

  decodeFunctionResult(functionFragment: "a()", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "a(bool)", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "b", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "c", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "d", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "e", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "f", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "g", data: BytesLike): Result;

  events: {};
}

export interface MockReentrancy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockReentrancyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "a()"(
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    "a(bool)"(
      reenter: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<ContractTransaction>;

    b(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    c(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    d(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    e(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    f(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

    g(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;
  };

  "a()"(
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  "a(bool)"(
    reenter: boolean,
    overrides?: Overrides & { from?: string }
  ): Promise<ContractTransaction>;

  b(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  c(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  d(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  e(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  f(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  g(overrides?: Overrides & { from?: string }): Promise<ContractTransaction>;

  callStatic: {
    "a()"(overrides?: CallOverrides): Promise<void>;

    "a(bool)"(reenter: boolean, overrides?: CallOverrides): Promise<void>;

    b(overrides?: CallOverrides): Promise<void>;

    c(overrides?: CallOverrides): Promise<void>;

    d(overrides?: CallOverrides): Promise<void>;

    e(overrides?: CallOverrides): Promise<void>;

    f(overrides?: CallOverrides): Promise<void>;

    g(overrides?: CallOverrides): Promise<void>;
  };

  filters: {};

  estimateGas: {
    "a()"(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    "a(bool)"(
      reenter: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<BigNumber>;

    b(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    c(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    d(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    e(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    f(overrides?: Overrides & { from?: string }): Promise<BigNumber>;

    g(overrides?: Overrides & { from?: string }): Promise<BigNumber>;
  };

  populateTransaction: {
    "a()"(
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    "a(bool)"(
      reenter: boolean,
      overrides?: Overrides & { from?: string }
    ): Promise<PopulatedTransaction>;

    b(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    c(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    d(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    e(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    f(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;

    g(overrides?: Overrides & { from?: string }): Promise<PopulatedTransaction>;
  };
}
